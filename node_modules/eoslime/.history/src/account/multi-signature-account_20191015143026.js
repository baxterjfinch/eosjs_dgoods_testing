const is = require('../helpers/is')
const BaseAccount = require('./base-account');

class MultiSignatureAccount extends BaseAccount {

    constructor(name, privateKey, provider, authority, accounts) {
        super(name, privateKey, provider, authority)

        this.accounts = []
        for (let i = 0; i < accounts.length; i++) {
            is(accounts[i]).instanceOf(BaseAccount)
            this.accounts.push(accounts[i])
        }
    }

    async buyRam(bytes, payer = this) {
        this.propose();
    }

    async buyBandwidth(cpu, net, payer = this) {
        this.propose();
    }

    async send(receiver, amount, symbol = 'EOS') {
        this.propose();
    }

    async createAuthority(authorityName, threshold = 1) {
        this.propose();
    }

    async setAuthorityAbilities(abilities) {
        this.propose();
    }

    async setThreshold(threshold) {
        this.propose();
    }

    async addPermission(authorityName, weight = 1) {
        this.propose();
    }

    async addOnBehalfAccount(accountName, authorityName, weight = 1) {
        this.propose();
    }

    async addAuthorityKey(publicKey, weight = 1) {
        this.propose();
    }

    async setWeight() {
        this.propose();
    }

    addProposerAccount(account) {
        is(account).instanceOf(BaseAccount)
        this.proposers.push(account)
    }

    execProposal(proposalName, executor = this) {
        is(executor).instanceOf(BaseAccount)
        const msigContract = getLazyMSigContractInstance();
        await msigContract.exec(this.name, proposalName, executor.name, { from: executor })
    }

    cancelProposal(proposalName, canceler = this) {
        is(executor).instanceOf(BaseAccount)
        const msigContract = getLazyMSigContractInstance();
        await msigContract.exec(this.name, proposalName, canceler.name, { from: canceler })
    }

    approveProposal(approver, proposalName) {
        is(approver).instanceOf(BaseAccount)

        const msigContract = getLazyMSigContractInstance();
        // Check if it works, cus there should have proposal hash
        await msigContract.approve(this.name, proposalName, approver.executiveAuthority.permission)
    }

    // Todo: check if proposal name is actually 12 symbol EOS account name
    async propose(contractName, action, ...actionData) {
        // proposer is this.privateKey
        const accountInfo = await this.getAuthorityInfo();
        // const contractInstance = await ContractFactory.at(contractName, proposer)
        const actionTx = await utils.generateTransaction(contractName, action, ...actionData)
        // const actionTx = await contractInstance[action](...actionData, { broadcast: false, sign: false })

        const msigContract = getLazyMSigContractInstance();
        await msigContract.propose(this.name, proposal Name, [accountInfo.required_auth], actionTx)

        await this.provider.eos.transact({
            actions: [{
                account: 'eosio.msig',
                name: 'propose',
                authorization: [{
                    actor: proposer.actor,
                    permission: proposer.permission,
                }],
                data: {
                    proposer: proposer.name,
                },
            }]
        });
    }
}



module.exports = MultiSignatureAccount
