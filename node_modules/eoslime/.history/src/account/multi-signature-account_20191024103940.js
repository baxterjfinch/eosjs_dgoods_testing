const is = require('../helpers/is')
const Account = require('./account');

class MultiSignatureAccount extends Account {

    constructor(name, privateKey, provider, authority) {
        super(name, privateKey, provider, authority)

        this.accounts = [];
        this.proposals = {};
        this.proposalsActions = {};
    }

    async buyRam(bytes, payer = this) {
        this.propose();
    }

    async buyBandwidth(cpu, net, payer = this) {
        this.propose();
    }

    async send(receiver, amount, symbol = 'EOS') {
        this.propose();
    }

    async createAuthority(authorityName, threshold = 1) {
        this.propose();
    }

    async setAuthorityAbilities(abilities) {
        this.propose();
    }

    async setThreshold(threshold) {
        this.propose();
    }

    async addPermission(authorityName, weight = 1) {
        this.propose();
    }

    async addOnBehalfAccount(accountName, authorityName, weight = 1) {
        this.propose();
    }

    async addAuthorityKey(publicKey, weight = 1) {
        this.propose();
    }

    async setWeight() {
        this.propose();
    }

    loadKeys(privateKeys) {
        for (let i = 0; i < privateKeys.length; i++) {
            this.accounts.push(new Account(this.name, privateKeys[i], this.provider, this.executiveAuthority.permission));
        }
    }

    loadAccounts(accounts) {
        for (let i = 0; i < accounts.length; i++) {
            is(accounts[i]).instanceOf(Account);
            this.accounts.push(accounts[i]);
        }
    }

    async propose(contractAction, actionData) {
        const actionTx = await contractAction.getSignedTransaction(this, ...actionData);
        const proposalId = Date.now();

        this.proposals[proposalId] = actionTx;
        this.proposalsActions[proposalId] = { action: contractAction, data: actionData };
        return proposalId;
    }

    async approve(approver, proposalId) {
        is(approver).instanceOf(Account);
        if (!this.proposals[proposalId]) {
            throw new Error('Such proposal does not exists');
        }

        const proposalAction = this.proposalsActions[proposalId];
        const actionTx = await proposalAction.action.getSignedTransaction(approver, ...proposalAction.data);

        this.proposals[proposalId].signatures.push(actionTx.signatures[0]);
    }

    async approveAll(proposalId) {
        for (let i = 0; i < this.accounts.length; i++) {
            await this.approve(this.accounts[i], proposalId);
        }
    }

    async processProposal(proposalId) {
        if (!this.proposals[proposalId]) {
            throw new Error('Such proposal does not exists');
        }

        const proposalTx = this.proposals[proposalId];
        delete this.proposals[proposalId];
        delete this.proposalsActions[proposalId]

        return this.provider.eos.pushTransaction(proposalTx);
    }

    async disapproveProposal(disapprover, proposalName) {
        is(disapprover).instanceOf(Account);

        await executeMultiSignatureAction.call(this, 'unapprove', {
            proposer: disapprover.name,
            proposal_name: proposalName,
            level: disapprover.executiveAuthority.permission,
        });
    }

    async cancelProposal(proposalName, canceler = this) {
        is(executor).instanceOf(Account);

        await executeMultiSignatureAction.call(this, 'cancel', {
            proposer: this.name,
            proposal_name: proposalName,
            canceler: canceler.name,
        });
    }
}

module.exports = MultiSignatureAccount
