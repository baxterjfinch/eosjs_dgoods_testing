const BaseAccount = require('./../base-account');

class AuthorityAccount extends BaseAccount {
    // createSubAuthority
    async createAucreateSubAuthoritythority(authorityName, threshold = 1) {
        const authorization = {
            threshold,
            keys: [{ key: this.publicKey, weight: threshold }]
        }

        await updateAuthority.call(this, authorityName, this.executiveAuthority.permission, authorization);
        return new Account(this.name, this.privateKey, this.provider, authorityName);
    }

    async setAuthorityAbilities(abilities) {
        is(abilities).instanceOf('Array');
        // await super.getAuthorityInfo(authorityName);

        await this.provider.eos.transaction(tr => {
            for (let i = 0; i < abilities.length; i++) {
                const ability = abilities[i];
                tr.linkauth({
                    account: this.name,
                    code: ability.contract,
                    type: ability.action,
                    requirement: this.executiveAuthority.permission
                }, { authorization: [`${this.name}@`] });
                // }, { authorization: [this.executiveAuthority] });
            }
        }, { broadcast: true, sign: true, keyProvider: this.privateKey });
    }
}

module.exports = AuthorityAccount;
