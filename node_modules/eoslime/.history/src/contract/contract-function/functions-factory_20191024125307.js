const ContractFunction = require('./contract-function');
const optionalsFunctions = require("./function-optionals");

class FunctionsFactory {

    createFunction(contract, functionName, contractStructs) {
        const contractFunction = new ContractFunction(contract, functionName, contractStructs);
        const proxyHandler = {
            get: (obj, value) => {
                if (!obj.hasOwnProperty(value)) {
                    return contractFunction[value]
                }
            }
        }

        const proxy = new Proxy(async function (...params) {
            return contractFunction.execute(...params);
            const functionParamsCount = contractFunction.contractStructs[functionName].fields.length;
            const functionParams = params.slice(0, functionParamsCount);
            const functionTx = contractFunction.buildFunctionRawTxData(contract.executor, functionParams);

            // Optionals starts from the last function parameter position
            const optionals = params[functionParamsCount] instanceof Object ? params[functionParamsCount] : null;
            for (let i = 0; i < optionalsFunctions.all.length; i++) {
                const optionalFunction = optionalsFunctions.all[i];
                await optionalFunction(optionals, functionTx);
            }



            const txReceipt = await executeFunction(contract.provider.eos, functionTx);
            contractFunction.emit(contractFunction.events.processed, txReceipt);

            return txReceipt;
        }, proxyHandler)
    }
}

module.exports = FunctionsFactory
