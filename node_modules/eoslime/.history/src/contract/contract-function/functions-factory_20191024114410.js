const ContractFunction = require('./contract-function');

class FunctionsFactory {

    createFunction(contract, functionName, contractStructs) {
        constrContractFunctionc
        // const contractFunction = async function () {
        //     let functionParamsCount = contractStructs[functionName].fields.length;
        //     let functionParams = params.slice(0, functionParamsCount);
        //     let structuredParams = structureParamsToExpectedLook(functionParams, contractStructs[functionName].fields);
        //     let functionTx = buildMainFunctionTx(contract.name, functionName, structuredParams, contract.executor);

        //     // Optionals starts from the last function parameter position
        //     let optionals = params[functionParamsCount] instanceof Object ? params[functionParamsCount] : null;
        //     for (let i = 0; i < optionalsFunctions.all.length; i++) {
        //         const optionalFunction = optionalsFunctions.all[i];
        //         await optionalFunction(optionals, functionTx);
        //     }

        //     const txReceipt = await executeFunction(contract.provider.eos, functionTx);
        //     self.emit(EVENTS.processed, txReceipt);

        //     return txReceipt;
        // }
    }
}

module.exports = FunctionsFactory
