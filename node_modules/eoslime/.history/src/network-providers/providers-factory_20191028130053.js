const Provider = require('./provider');

class ProvidersFactory {
    constructor(network) {
        this.provider = new Provider(network);
    }

    static create(network) {

    }

    reset() {

    }
}

// const provider = constructProvider(network);
// return proxifyProvider(provider);

const proxifyProvider = function (provider) {
    const providerProxyHandler = {
        get: (obj, value) => {
            if (!obj.hasOwnProperty(value)) {
                return provider[value];
            }

            return obj[value];
        },
        construct: (target, network) => {
            return constructProvider(network);
        }
    }

    return new Proxy({
        reset: function (newProvider) {
            is(newProvider).instanceOf(BaseProvider);
            Object.assign(this.instance, newProvider);
        }
    }, providerProxyHandler);
}

module.exports = ProvidersFactory;
