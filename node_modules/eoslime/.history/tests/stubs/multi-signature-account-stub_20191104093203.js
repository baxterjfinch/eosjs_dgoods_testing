const MultiSignatureAccount = require('./../../src/account/multi-signature-account');

class MultiSignatureAccountStub extends MultiSignatureAccount {

    async buyRam(systemContractName, bytes, payer = this) {
        is(payer).instanceOf(Account);

        if (!hasTheProposerName(payer, this)) {
            return super.buyRam(bytes, payer);
        }

        const systemContract = await retrieveContract.call(this, systemContractName, payer);
        requireContractAction(systemContract.buyrambytes);

        return this.propose(systemContract.buyrambytes, [
            payer.name,
            this.name,
            bytes
        ]);
    }

    async buyBandwidth(cpu, net, payer = this) {
        is(payer).instanceOf(Account);

        if (!hasTheProposerName(payer, this)) {
            return super.buyBandwidth(cpu, net, payer);
        }

        const systemContract = await retrieveContract.call(this, 'eosio', payer);
        requireContractAction(systemContract.delegatebw);

        return this.propose(systemContract.delegatebw, [
            payer.name,
            this.name,
            cpu,
            net,
            0
        ]);
    }

    async send(receiver, amount, symbol = 'EOS') {
        is(receiver).instanceOf(Account);

        const tokenContract = await retrieveContract.call(this, 'eosio.token', this);
        requireContractAction(tokenContract.transfer);

        return this.propose(tokenContract.transfer, [
            this.name,
            receiver.name,
            `${amount} ${symbol}`,
            this.executiveAuthority
        ]);
    }
}

module.exports = MultiSignatureAccountStub;
