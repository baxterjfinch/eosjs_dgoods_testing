class MultiSignatureAccountStub {

    async buyRam(multiSignatureAccount) {
        return this.propose('buyrambytes', [
            payer.name,
            this.name,
            bytes
        ]);
    }


    async propose(actionName, actionData) {

        this.accounts = [];
        this.proposals = {};
        this.proposalsActions = {};
        const actionTx = await contractAction.sign(this, ...actionData);
        const proposalId = Date.now();

        this.proposals[proposalId] = actionTx;
        this.proposalsActions[proposalId] = { action: contractAction, data: actionData };

        return proposalId;
    }

    async approve(approver, proposalId) {
        is(approver).instanceOf(Account);
        requireExistingProposal(this.proposals, proposalId);

        const proposalAction = this.proposalsActions[proposalId];

        let actionTx;
        if (hasTheProposerName(approver, this)) {
            actionTx = await proposalAction.action.sign(approver, ...proposalAction.data);
        } else {
            actionTx = await proposalAction.action.signOnBehalf(approver, this, ...proposalAction.data);
        }

        this.proposals[proposalId].signatures.push(actionTx.signatures[0]);
    }

    async processProposal(proposalId) {
        requireExistingProposal(this.proposals, proposalId);
        requireEnoughApprovals(this, this.proposals[proposalId]);

        const proposalTx = this.proposals[proposalId];
        delete this.proposals[proposalId];
        delete this.proposalsActions[proposalId]

        return this.provider.eos.pushTransaction(proposalTx);
    }
}

module.exports = MultiSignatureAccountStub;
