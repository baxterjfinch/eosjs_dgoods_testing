const assert = require('assert');
const eoslime = require('./../').init();

const utils = require('./../src/utils');
const createAccountNameFromPublicKey = require('./../src/account/public-key-name-generator').createAccountNameFromPublicKey;

/*
    You should have running local nodeos in order to run tests
*/

describe.only('Features', function () {

    // Increase mocha(testing framework) time, otherwise tests fails
    this.timeout(15000);

    const FAUCET_ABI_PATH = "./tests/testing-contracts/compiled/faucet.abi";
    const FAUCET_WASM_PATH = "./tests/testing-contracts/compiled/faucet.wasm";

    //5KGaQ14gSZxhBeUz4AS6REkbZt5pakhoEhATupcWgHfdraoCycT
    const MSIG_ABI_PATH = "./tests/testing-contracts/compiled/eosio.msig.abi";
    const MSIG_WASM_PATH = "./tests/testing-contracts/compiled/eosio.msig.wasm";

    let faucetAccount;

    beforeEach(async () => {
        try {
            faucetAccount = await eoslime.Account.createRandom();
            await eoslime.Contract.deployOnAccount(FAUCET_WASM_PATH, FAUCET_ABI_PATH, faucetAccount);

            const msig = await eoslime.Account.load('eosio.msig', '5KTopL7p1PvvjfmXnRihzFmyGQbEbDPk3W5eouu5AGZfoEYommU')
            await eoslime.Contract.deployOnAccount(MSIG_WASM_PATH, MSIG_ABI_PATH, msig);
        } catch (error) {
            console.log(error);
        }
    });

    describe.only('Set authority abilities', function () {
        it('Should execute an action from custom authority', async () => {
            const account = await eoslime.Account.createRandom();
            const tokensReceiver = await eoslime.Account.createRandom()

            const keysPair = await utils.generateKeys();
            const secondAccount = eoslime.Account.load(account.name, keysPair.privateKey);
            await account.addAuthorityKey(keysPair.publicKey)
            await account.setThreshold(2);

            const multiSigAccount = await eoslime.Account.loadMultisig(account.name, [secondAccount], account.privateKey, 'active')
            const a = await multiSigAccount.propose(faucetAccount.name, 'produce', faucetAccount.name, "100.0000 TKNS", faucetAccount.name, "memo")
            // console.log(a)
        });
    });
});
